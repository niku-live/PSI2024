#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Operator Overloading

- **Unary Math + Logic**: +x -x !x ~x ++ -- true false
- **Binary Math**: x + y x - y x * y x / y x % y x & y x | y x ^ y x << y x >> y
- **Binary Logical (In Pairs)**: x == y x != y x < y x > y x <= y x >= y

#!markdown

### Start: Simple Point Class (no operator overload)

#!csharp

class SimplePoint
{
    public int X;
    public int Y;

    public SimplePoint() { }
    
    public SimplePoint(int x, int y)
    {
        X = x;
        Y = y;
    }

    public override string ToString()
    {
        return $"({X};{Y})";
    }
}

#!csharp

display("");
SimplePoint p1 = new SimplePoint(1, 2);
SimplePoint p2 = new SimplePoint(3, 4);
Console.WriteLine(p1);
Console.WriteLine(p2);

#!csharp

Console.WriteLine(p1 + p2);

#!markdown

### Simple Point Class + operator

#!csharp

class SimplePoint2
{
    public int X;
    public int Y;

    public SimplePoint2() { }
    
    public SimplePoint2(int x, int y)
    {
        X = x;
        Y = y;
    }

    public static SimplePoint2 operator +(SimplePoint2 p1, SimplePoint2 p2)
    {
        return new SimplePoint2(p1.X + p2.X, p1.Y + p2.Y);
    }

    public override string ToString()
    {
        return $"({X};{Y})";
    }
}

#!csharp

display("");
SimplePoint2 p1 = new SimplePoint2(1, 2);
SimplePoint2 p2 = new SimplePoint2(3, 4);
Console.WriteLine(p1);
Console.WriteLine(p2);

#!csharp

Console.WriteLine(p1 + p2);

#!markdown

### Simple Point Class + operator + operator with other types

#!csharp

Console.WriteLine(p1 + 1);

#!csharp

class SimplePoint3
{
    public int X;
    public int Y;

    public SimplePoint3() { }
    
    public SimplePoint3(int x, int y)
    {
        X = x;
        Y = y;
    }

    public static SimplePoint3 operator +(SimplePoint3 p1, SimplePoint3 p2)
    {
        return new SimplePoint3(p1.X + p2.X, p1.Y + p2.Y);
    }

    public static SimplePoint3 operator +(SimplePoint3 p1, int p2)
    {
        return new SimplePoint3(p1.X + p2, p1.Y + p2);
    }

    public override string ToString()
    {
        return $"({X};{Y})";
    }
}

#!csharp

display("");
SimplePoint3 p1 = new SimplePoint3(1, 2);
SimplePoint3 p2 = new SimplePoint3(3, 4);
Console.WriteLine(p1);
Console.WriteLine(p2);

Console.WriteLine(p1 + p2);

Console.WriteLine(p1 + 1);

#!csharp

Console.WriteLine(1 + p1);

#!markdown

### Simple Point Class + operator + operator with other types 2

#!csharp

class SimplePoint4
{
    public int X;
    public int Y;

    public SimplePoint4() { }
    
    public SimplePoint4(int x, int y)
    {
        X = x;
        Y = y;
    }

    public static SimplePoint4 operator +(SimplePoint4 p1, SimplePoint4 p2)
    {
        return new SimplePoint4(p1.X + p2.X, p1.Y + p2.Y);
    }

    public static SimplePoint4 operator +(SimplePoint4 p1, int p2)
    {
        return new SimplePoint4(p1.X + p2, p1.Y + p2);
    }

    public static SimplePoint4 operator +(int p1, SimplePoint4 p2)
    {
        return new SimplePoint4(p1 + p2.X, p1 + p2.Y);
    }

    public override string ToString()
    {
        return $"({X};{Y})";
    }
}

#!csharp

display("");
SimplePoint4 p1 = new SimplePoint4(1, 2);
SimplePoint4 p2 = new SimplePoint4(3, 4);
Console.WriteLine(p1);
Console.WriteLine(p2);

Console.WriteLine(p1 + p2);

Console.WriteLine(p1 + 1);

Console.WriteLine(1 + p1);

#!csharp

Console.WriteLine(p1 > p2);

#!markdown

### Simple Point Class + operator + operator with other types + logical operator

#!csharp

class SimplePoint5
{
    public int X;
    public int Y;

    public SimplePoint5() { }
    
    public SimplePoint5(int x, int y)
    {
        X = x;
        Y = y;
    }

    public static SimplePoint5 operator +(SimplePoint5 p1, SimplePoint5 p2)
    {
        return new SimplePoint5(p1.X + p2.X, p1.Y + p2.Y);
    }

    public static SimplePoint5 operator +(SimplePoint5 p1, int p2)
    {
        return new SimplePoint5(p1.X + p2, p1.Y + p2);
    }

    public static SimplePoint5 operator +(int p1, SimplePoint5 p2)
    {
        return new SimplePoint5(p1 + p2.X, p1 + p2.Y);
    }

    public static bool operator >(SimplePoint5 p1, SimplePoint5 p2)
    {
        return p1.X > p2.X && p1.Y > p2.Y;
    }

    public override string ToString()
    {
        return $"({X};{Y})";
    }
}

#!markdown

### Simple Point Class + operator + operator with other types + logical operator 2

#!csharp

class SimplePoint5
{
    public int X;
    public int Y;

    public SimplePoint5() { }
    
    public SimplePoint5(int x, int y)
    {
        X = x;
        Y = y;
    }

    public static SimplePoint5 operator +(SimplePoint5 p1, SimplePoint5 p2)
    {
        return new SimplePoint5(p1.X + p2.X, p1.Y + p2.Y);
    }

    public static SimplePoint5 operator +(SimplePoint5 p1, int p2)
    {
        return new SimplePoint5(p1.X + p2, p1.Y + p2);
    }

    public static SimplePoint5 operator +(int p1, SimplePoint5 p2)
    {
        return new SimplePoint5(p1 + p2.X, p1 + p2.Y);
    }

    public static bool operator >(SimplePoint5 p1, SimplePoint5 p2)
    {
        return p1.X > p2.X && p1.Y > p2.Y;
    }

    public static bool operator <(SimplePoint5 p1, SimplePoint5 p2)
    {
        return p1.X < p2.X && p1.Y < p2.Y;
    }

    public override string ToString()
    {
        return $"({X};{Y})";
    }
}

#!csharp

display("");
SimplePoint5 p1 = new SimplePoint5(1, 2);
SimplePoint5 p2 = new SimplePoint5(3, 4);
Console.WriteLine(p1);
Console.WriteLine(p2);

Console.WriteLine(p1 + p2);

Console.WriteLine(p1 + 1);

Console.WriteLine(1 + p1);

Console.WriteLine(p1 > p2);
